<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Legacy Code on Kodofish Blog</title><link>https://kodofish.dev/tags/legacy-code/</link><description>Recent content in Legacy Code on Kodofish Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Mon, 18 May 2020 20:00:00 +0800</lastBuildDate><atom:link href="https://kodofish.dev/tags/legacy-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Working Effectively with Legacy Code - CH1 修改軟體</title><link>https://kodofish.dev/post/2020-05-20_working_effectively_with_legacy_code_01/</link><pubDate>Mon, 18 May 2020 20:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2020-05-20_working_effectively_with_legacy_code_01/</guid><description>這一系列文章是我在閱讀 Working Effectively with Legacy Code 這本書的書摘，其中穿插著我對於部份內容的心得。我盡可能的重新用自己的話與理解來寫這一系列文，好讓自己能夠重新整理書中的內容。若對於此書有興趣，也同時被遺留代碼殘害的工程師非常推薦將這本書買回去好好的閱讀。
修改軟體的四個理由 添加新特性 修正 Bug 改善設計 最佳化資源使用 添加新特性與修正 Bug 這應該是一個正在發展中的產品會因為不斷的在現有產品上不斷加上新工能，RD 得不斷的在現有的 程式碼中進行添加或修改。但對於新增功能還是 Bug 的修改，這點對於不同角色會有不同的看法，這是很主觀的。
改善設計 改善設計是另一種軟體修改，在不改變軟體既有的功能及行為下，修改軟體的結構或組織，讓軟體可以更容易維護。但這樣的操作很容易產生 Bug，因此有多數的程式設計師都盡可能不去做這件事，深怕產生了新的 Bug 會被抓出來當戰犯審問。
這樣的操作被稱之為重構(Refactoring)。重構的概念是先撰寫測試以確保軟體現有的行為不被改變，每做一小步的修改就執行一次測試，小心驗證軟體行為沒有被改變。
有一個跟重構很像的行為叫&amp;quot;程式碼清理(Clean UP)&amp;quot;，與重構的不同在於重構會做比較危險的修改，例如重寫程式碼區塊、將部份程式碼抽出成一個 Method…等。
最佳化 這部份與重構類似，但目標不同。兩者都是在不改變軟體功能行為下進行操作，但會改變某些其他東西。不同的是重構改變的是軟體組織或結構；而最佳化改變的是某些資源的使用，例如 CPU 負載、記憶體的使用量。
四個理由的比較 添加特性 修正 Bug 重構 最佳化 結構 改變 改變 - - 新功能 改變 - - - 功能 - 改變 - - 資源改變 - - - 改變 綜合比較添加特性與修正 Bug 的行為相當相似，所不同的在於添加特性改變的是&amp;quot;新功能&amp;rdquo;，而修改 Bug 改變的是&amp;quot;原有功能&amp;rdquo;。</description></item></channel></rss>