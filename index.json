[{"title":"如何設定 ASP.NET Core 網站應用程式持續執行在 IIS 上","date":"","description":"","body":"在 IIS 預設的設定下，只有在收到第一個 Request 後才會啟動執行網站應用程式。啟動後若 20 分鐘都沒有收到任何新的 Request 時，就會將應用程式給中止。\n若你要讓網站應用程式定時做一些背景工作，在 IIS 預設的設定下，你得在部署後發一個 Request 讓程式啟動，然後每 20 分鐘內再發一個 Request 讓 IIS 不會將程式給中止。\n但這樣實在是太麻煩了，雖然有許多方式可以做到，但其實 IIS 本身是可以做到持續執行的，要做到這點有三個步驟。\n 安裝 Application Initialization Module 設定 Application Pool 設定 IIS Web site  安裝 Application Initialization Module 這是最重要的一步，有時候就是忘了安裝它造成網站應用程式無法持續執行。首先執行 Server Manager，再點選 Manager \u0026gt; Add Roles and Features 順著 Add Roles and Features Wizard 一直到 Server Roles 時, 在清單中找到 Web Server (IIS) \u0026gt; Web Server \u0026gt; Application Development \u0026gt; Application Initialization，把它選起來並安裝它。 設定 Application Pool 在 IIS 裡找到你的網站應用程式所使用的 Application Pool，按右鍵叫出選單，點選 Advanced Settings 調整以下的設定值\n .NET CLR Version 為 v4.0 Start Mode 為 Always Running Idle Time-out (minutes) 為 0   Idle Time-out 設定為 0 代表著 IIS 不會主動停掉應用程式。Start Mode 設定為 Always Running 代表 IIS 會立即啟用應用程式而不用等待收到 Request 才執行。\n設定 IIS Web site 在 IIS 中，在網站上按右鍵叫出選單，點選 Manage Website \u0026gt; Advanced Settings 將 Preload Enabled 設定為 True。 驗證 照著步驟做應該就能夠設定完成了，你可以將工作管理員打開，找到網站應用程式的執行緒，點選 End Task 將它關閉。 有設定成功的話就會馬上再生出一個新的執行緒，可以看到 PID 會有所不同。 參考資料  IIS 8.0 Application Initialization  ","ref":"/post/2021-04-08_how_to_keep_and_running_web_application_on_iis/"},{"title":"Working Effectively with Legacy Code - CH1 修改軟體","date":"","description":"","body":" 這一系列文章是我在閱讀 Working Effectively with Legacy Code 這本書的書摘，其中穿插著我對於部份內容的心得。我盡可能的重新用自己的話與理解來寫這一系列文，好讓自己能夠重新整理書中的內容。若對於此書有興趣，也同時被遺留代碼殘害的工程師非常推薦將這本書買回去好好的閱讀。\n 修改軟體的四個理由  添加新特性 修正 Bug 改善設計 最佳化資源使用  添加新特性與修正 Bug 這應該是一個正在發展中的產品會因為不斷的在現有產品上不斷加上新工能，RD 得不斷的在現有的 程式碼中進行添加或修改。但對於新增功能還是 Bug 的修改，這點對於不同角色會有不同的看法，這是很主觀的。\n改善設計 改善設計是另一種軟體修改，在不改變軟體既有的功能及行為下，修改軟體的結構或組織，讓軟體可以更容易維護。但這樣的操作很容易產生 Bug，因此有多數的程式設計師都盡可能不去做這件事，深怕產生了新的 Bug 會被抓出來當戰犯審問。\n這樣的操作被稱之為重構(Refactoring)。重構的概念是先撰寫測試以確保軟體現有的行為不被改變，每做一小步的修改就執行一次測試，小心驗證軟體行為沒有被改變。\n有一個跟重構很像的行為叫\u0026quot;程式碼清理(Clean UP)\u0026quot;，與重構的不同在於重構會做比較危險的修改，例如重寫程式碼區塊、將部份程式碼抽出成一個 Method…等。\n最佳化 這部份與重構類似，但目標不同。兩者都是在不改變軟體功能行為下進行操作，但會改變某些其他東西。不同的是重構改變的是軟體組織或結構；而最佳化改變的是某些資源的使用，例如 CPU 負載、記憶體的使用量。\n四個理由的比較     添加特性 修正 Bug 重構 最佳化     結構 改變 改變 - -   新功能 改變 - - -   功能 - 改變 - -   資源改變 - - - 改變    綜合比較添加特性與修正 Bug 的行為相當相似，所不同的在於添加特性改變的是\u0026quot;新功能\u0026quot;，而修改 Bug 改變的是\u0026quot;原有功能\u0026quot;。\n添加特性、重構、最佳化都是維持現有功能不變，在這一點上是相當相似的。但我想要保持不變的地方是要多上許多的。\n行為保持我們以為只要關注在\u0026quot;新行為\u0026quot;上即可，只有修正 Bug、重構、最佳化時才需要關注在既有行為上。但事實上是，保留既有行為不變並非意味著不要碰這些程式碼就可以了，我們還是要去知道這些行為是不是有被改變，這才是最大的挑戰，因為通常行為被變更都是在修改的過程中不經意的被變更了。\n就算是添加新特性，也是有很大的機會會異動到既有行為。\n危險的修改 要保持原有功能的不變是很大的挑戰，作者認為要減少風險需要考慮三個問題：\n 我們要進行哪些修改？ 我們如何得知已經正確地完成了修改？ 我們如何得知沒有破壞任何既有的行為？  作者提到他曾經共事的團隊大多會採取相當保守的策略來避免風險，把會變動 code 的數量降到最低、能不異動就不動、沒有故障就不動它。\n這種方式在我過去的工作經驗中也常常遇到，但盡可能不動就會讓軟體越來越陌生，你會越來越無法理解這軟體究竟是如何運作的，軟體也會越來越肥大，終究有一天長成巨大怪獸後，團隊受不了、主管不明白到底為什麼會變成這樣的同時，就會有個人跳出來決定要重寫軟體或找個理由開發一套新的軟體。\n人們會【避免】修改，之所以避免是由於自己對於要修改的部份沒有信心，因為沒有方法可以讓自己知道這個修改到底有沒有風險，你可能需要花許多時間去理解要修改的區域，你卻可能沒有這麼多的時間可以去理解，這時好的系統與系統之間的差別就顥現出來了。\n而避免修改會導致一個後果，就是對於修改程式碼的技術生疏，例如：重構技術，因為沒有學習或練習的機會。許多人對於重構的理解僅止於把程式碼搬搬位置，調換順序的階段。然而重構是門藝術，它可以讓你的程式碼隨著需求而不斷的演進。不熟悉重構就會讓你的程式碼不斷的長大而非演進。\n還有一個後果就是讓團隊一直處在恐懼的狀態下，不知道那天會踩到何種地雷，恐懼越多也就越不敢修改軟體。\n該如何做\u001f 書中提到避免修改是不可取的方法，反而應該是要盡量的去修改。但可能會產生許多人力的需求。採用 Code Review 就一定能控制風險嗎？能夠確保風險被控制嗎？Code Review 後就能確切知道事情有被做對嗎？ 繼續往下看也許就能夠找到合理的答案了。\n","ref":"/post/2020-05-20_working_effectively_with_legacy_code_01/"},{"title":"Nuget Deprecating Package","date":"","description":"","body":"今天發現了 Lag 有一段時間的新功能，就是 Nuget.org 支援 Deprecating packages 新功能。 過去 Nuget 在還沒有支援這項功能前，開發者只能一直讓舊版軟體一直掛在 nuget.org 上, 讓使用者繼續使用，或是使用 Unlisting，讓使用者無法繼續搜尋到特定版本的 Package。\n而在開放 Deprecating package 後, 只要你是使用 Visual Studio 2019 16.3 以後的版本，在使用 nuget manageer 時, 就可以直接在畫面上看到 Deprecating 的提示。\n在 Nuget blog 上就有教你該如何操作 Deprecating package 的步驟，超容易操作。\n若是自建 private nuget server 的話，似乎還未釋出 Deprecating package 的功能，只能先使用 enableDelisting 來處理。\n參考資料  Deprecating packages on nuget.org Deprecating packages Nuget Server - Github  ","ref":"/post/2020-05-18_nuget_depredcating_package/"},{"title":"安裝 SonarQube - 為你的團隊建立軟體品質儀表板","date":"","description":"","body":"從事軟體開發工作已經多年，軟體品質、工程師績效向來是一直難以量化呈現的問題。過去曾看過管理階層試圖以各種方式來定義，但總有許多技術上的問題與人性挑戰。無法量化，團隊就難以對於品質有一致的認知，沒有一致的認知在開發的過程中多少就會有些許的衝突。\n而 SonarQube 就是個讓你可以把團隊的軟體品質給數據化呈現出來軟體，也能讓團隊瞭解所開發的軟體是否有些潛在的問題。\n 如果你無法加以量度，或是無法以數字將之表達出來，那麼你對於那樣東西的所知，則要歸於貧乏之列，或是嚴重不足— Lord Kelvin\n 這篇來講講 SonarQube 安裝，這篇是我在安裝 SonarQube 時的安裝過程整理，\n下載 SonarQube 在 SonarQube 官網 提供了幾個版本可以下載，分為 Community、Developer、Enterprise 與 Data Center 四個版本，可依自己的需求下載適合的版本。由於這次是先試用評估功能，所以就先下載 Community 的版本。\n快速啟動 SonarQube 這方式蠻適合想先試用 SonarQube 評估對於團隊的幫助有多少時，可以先用快速安裝來減少前期準備的時間。 將先前下載的 SonarQube 解壓縮並放在適合的位置後，以命令列執行 StarSonar.bat。例如：\n$SONARQUBE-HOME\\bin\\windows-x86-xx\\StartSonar.bat 就官方文件上寫的，這樣應該就可以啟動 SonarQube 了，但我執行就看到這樣的訊息。\n在訊息的一開始有個 Unable to execute Java command. 的訊息，猜想可能是找不到 java 執行檔, 試著用 command line 去執行 java。\n果然!! 找不到 Java，找不到 java 就將 java 加入環境參數內，再重新執行一次。這次就順利執行起來了, 打開瀏覽器輸入 http://localhost:9000/ 看到 SonarQube 的畫面就完成了。\n SonarQube - Get Started in Two Minutes Guide  完整安裝 SonarQube 前一節的快速啟動算是可以讓你用較短的時間將 SonarQube 執行起來，並開始試用它。但只要伺服器重新開機就必須手動再重新執行一次，對於長期使用來說並不方便，而且前面也提到過沒有安裝資料庫，未來若是程式升級或是你想要搬伺服器的話，資料有可能是無法轉移的。因此這一節來說說該如何完整安裝 SonarQube。\n在執行 SonarQube 前，有兩件事要先準備好。第一是安裝 Java JRE 11。第二是安裝資料庫。\n安裝 Java JRE 11 在這一步，我本來是想照著文件安裝 Java JRE 11 就好了，但找來找去找不到, 索興安裝 Java JDK 11。\n Java JRE 官方下載  安裝資料庫 這個步驟是可以略過的，SonarQube 就會將資料儲存在本地，但這方法官方有說是不支援未來的升級與轉移的，所以已經確定要正式導入團隊使用時，建議還是採用完整安裝，建立專用的資料庫來讓 SonarQube 使用會比較恰當。\n資料庫支援 PostgreSQL、MS SQL、Oracle 這種資料庫，就挑選自己熟悉或喜歡的裝，若是用在公司還是要考量公司的技術偏好與可支援的程度來決定，這篇文章就不特別寫該如何安裝資料庫。\n SonarQube - Prerequisites and Overview  設定資料庫 在準備好資料庫後, 編輯 $SONARQUBE-HOME/conf/sonar.properties 這個設定檔來設定資料庫，這裡我使用 Oracle。設定參考如下，請再自己換成屬於自己環境的設定。\n# User credentials. # Permissions to create tables, indices and triggers must be granted to JDBC user. # The schema must be created first. sonar.jdbc.username=username sonar.jdbc.password=password #----- Oracle 11g/12c/18c/19c sonar.jdbc.url=jdbc:oracle:thin:@127.0.0.1:1521:sonarqubedb 下載 jdbc driver 使用 Oracle 時還得要自己另外載下 jdbc driver, 並放到 $SONARQUBE-HOME/extensions/jdbc-driver/oracle 這個目錄底下，要特別注意的是千萬要下載 V12.1 以上的版本，像我一開始就是下載 v11.2.0.4.0 的版本，一直無法讓 Service 順利執行起來，還以為是不是連線字串有誤，查了老半天擔誤了不少時間後，才在 Log 裡看到一行錯誤訊息。\n Caused by: org.sonar.api.utils.MessageException: Unsupported Oracle driver version: 11.2.0.4.0. Minimal supported version is 12.1.\n 這個錯誤就讓我多花了快兩個小時的時間\u0026hellip;Orz\n Oracle JDBC Driver download  將 SonarQube 以 Windows Service 執行 SonarQube 已經準備好 Service 的執行檔，要安裝時執行\n%SONARQUBE_HOME%/bin/windows-x86-64/InstallNTService.bat 解除安裝\n%SONARQUBE_HOME%/bin/windows-x86-64/UninstallNTService.bat 要啟動或停止服務也只要執行以下的命令\n%SONARQUBE_HOME%/bin/windows-x86-64/StartNTService.bat %SONARQUBE_HOME%/bin/windows-x86-64/StopNTService.bat Service 啟動後，打開瀏覽器輸入 http://localhost:9000/，看到 SonarQube 的畫面代表安裝已經完成。\n SonarQube - Install the Server SonarQube - Operating the Server  ","ref":"/post/2020-05-05_sonarqube_quick_install/"},{"title":"用 CONFIG SET 來變更 redis 連線密碼","date":"","description":"","body":"使用 Redis 時為了增加其安全性，不讓其他人可以隨時連進 Redis 進行操作，通常都會設定一組密碼。而密碼的設定除了透過修改 Redis config 之外，Redis 也提供了一個指令可以直接在線上進行修改，而且不需要重啟服務。\n這次所要使用的指令就是 CONFIG SET\n使用 CONFIG SET 修改除了立即生效外，所支援的參數都與 redis.config 文件內所使用參數相同。\n使用上挺簡單的，先使用 Redis-cli 連上 Redis。\n使用 Redis-Cli 進行測試 先使用 Auth password 來測試是不是有設定密碼，預設情況下是不會有密碼的，所以 Redis 回給予 ERR Client sent AUTH, but no password is set 的訊息。\n使用 CONFIG SET 指令設定密碼 接下來輸入以下的指令\nCONFIG SET requirepass \u0026#34;pass\u0026#34; 這段指定就是將 redis 密碼修改為 pass。 CONFIG SET 可以修改的設定相當多，我們這次是要設定密碼，在 Redis config 裡的屬性就是 requirepass。輸入後看到 OK 代表修改成功了。\n再次測試密碼 一樣透過 redis-cli 連上 Redis 後, 輸入以下指令\nAuth pass redis 會回應\u0026quot;OK\u0026quot;的訊息，代表密碼驗證成功，就可以繼續操作 redis 了。若是在 Auth 輸入錯誤的密碼，就會回應 ERR invalid password 的訊息。\n參考資料 CONFIG SET\n","ref":"/post/2020-04-23_redis_command_change_password/"},{"title":"讓你的 Visual Studio Code 同步設定","date":"","description":"","body":"Visual Studio Code 是平常工作之外最常使用的編輯器了，不論是寫文件、查 Log、寫 Blog 都是用 Visual Studio Code。平時寫 Code 用的 Visual Studio 2017 本身就有設定檔同步的功能，不論我在公司或在家中使用時，都有一致的操作環環境與體驗。但 Visual Studio Code 卻沒有內建類似的功能，每當我新增了 Extension 或修改了設定，就必須再次在另一台電腦上手動再做一次，有點不方便。抱著這樣的困擾在 Google 上找了一下，就找到了今天想為此寫篇文的 Extension Settings Sync。\nSettings Sync 能做什麼？ Settings Sync 有幾個主要的功能。\n 使用你的 Github 帳號及 Gist 來做為設定檔的儲存與下載使用。 透過快速鍵就可以上傳或下載設定檔 每次啟動 Visual Studio Code 會自動下載設定檔。 設定檔是儲存在 Gist 上，也因此你可以將你的設定檔分享給其他人  Settings Sync 會同步 Visual Studio Code 的幾個設定檔，包含：\n Settings File Keybinding File Launch File Snippets Folder VSCode Extensions \u0026amp; Extensions Configurations Workspaces Folder  建立 Github access token Settings Sync 會需要使用你的 Github 及 Gist，所以如果你還沒有 Github 帳號的話，那趕快先去申請一個帳號，才能夠跟著繼續操作下去。\n安裝了 Settings Sync 這個 Extension 後，使用方式蠻簡單的，就兩個快速鍵。\n 上傳設定檔：Shift + Alt + U 下載設定檔：Shift + Alt + D  在開始操作前請先到 Github \u0026gt; Settings \u0026gt; Develop Settings \u0026gt; Personal access token \u0026gt; Generate New Token\n在 Token description 欄位輸入方便記憶的描述，例如：VSCode-SyncSetting。Scope 只需要給予gist就可以了。\n建立完成後就會將 Token 顯示在畫面上，記得把 Token 記下來，離開這個畫面後就消失了，也無法查詢。\n第一次上傳設定檔 有了 Token 就可以來進行設定檔同步作業，先按下 Shift + Alt + U，第一次操作時 Visual Studio Code 會詢問你的 Github access token，\n輸入你的 access token 後就完成了設定，此時 Settings Sync 會開始將設定檔上傳至 Gist，完成後會有一個上傳完成的通知。\n這個 Gist ID 請把它記下來，後續要讓另一台電腦下載設定檔就需要這個 Gist ID。\n如果沒記下來也沒關係，只要連到你的 Gist，就可以看到剛剛 Settings Sync 所上傳的內容 cloudSettings。\n點進去 cloudSettings 觀察一下網址。\n網址格式會長這個樣子。\n https://gist.github.com/{YourAccount}/{Gist ID}\n 網址最後一串英數字組成的就是 Gist ID。\n下載設定檔 換到另一台電腦，一樣在 Visual Studio Code 裡先安裝上 Settings Sync Extenstion。安裝後按下 Shift + Alt + D，此時一樣會詢問你的 Github access token，接著就會再詢問你的 Gist ID。\n填入後，就完成設定檔的同步啦。\n最後 Settings Sync 完全解決我期望的同步設定檔的需求，是一個很簡單使用的外掛，也希望這篇文章能夠幫助跟我有同樣需求正在看文章的你。\n","ref":"/post/2019-03-01_vscode_extension_settings_sync/"},{"title":"整理你的 Github 以及你為什麼該這麼做？","date":"","description":"","body":"各位有在使用 GitHub 的攻城獅/程序猿們，你們曾經整理過你們的 GitHub Repositories 嗎？你們的 Repositories 是否充斥著到處 Forks 回來的 Repository，而雜亂不堪？這邊介紹一下我自己在整理 GitHub 的小技巧。\n不知道各位是否曾經像我一樣 Repositories 裡有一堆的專案，如果你是參與了許多專案的開發，而且都有貢獻自己的心力在上面的話，專案數多還挺合理的。\n但如果是像我一樣只是 Fork 了一堆專案回來，也沒有真正 Pull Request，只是空有數字罷了。如果你也是這樣，建議你繼續看下去。\n我也曾經有一堆的 Repositories\n我會有一堆 Repositories 是因為早期剛開始使用 Github 時，那時候還搞不太懂 Fork 的功能到底是做什麼用的，只知道 Fork 會把別人的專案複製到自己的 Repository 裡，每當看到有興趣的專案或是為了工作所看到的專案都 Fork 回來，久而久之就如同上圖有 67個之多。\n但擁有這麼多專案並不能為你帶來什麼樣的好處或價值，尤其 Github 幾乎是觀察一個攻城獅平時在學習什麼樣的技術，或是觀察能力的途徑，也越來越多公司會要求提供 GitHub 連結，做為面試的一環。因此，錯誤的使用 Fork 會為你帶來以下幾個缺點：\n 無法輕易了解你最近貢獻了那些 Project。 無法了解你 Fork 這些專案的意圖為何？  解決辦法 我自己是使用 Github 的 Organizations 功能來充當分類資料夾，每一個 organization 有不同的定義，用來存放相同類型的 Project。\n我用 Organizations 充當資料夾\n我目前是建立了以下這些 Organizations\n Kodofish-Forks：這裡放我近期內仍有可能會用的專案，一旦放到這裡並留了一段時間後仍然沒有使用，代表其實不會去用它，就可以考慮將它刪除。 Kodofish-Old：這裡就存放過去所寫的 Project，這些 Project 可能只是當初實驗某些功能、一時興起寫的、或已經沒什麼人關注的 Project。這些專案我不太建議刪除，原因是這些都是你過往的歴程，即使沒用，但也都是你的一部份。 Kodofish-Learning：這裡的專案就會放我去上課時要繳交的作業；或是我自己在學某些技術時所做的 Project，這些 Project 可以代表你在學習時所留下的記錄。  Repositories 放些什麼？ 我目前 Repositories 就只留下以下的幾個 Project\n 長期維護的project，例如：blog、文章。 最近一直投注心力的 side project。 目前正在學習的新技術。  目前我的 Repositories 就只剩下五個 Project，對我自己而言能夠一目了然我當前有那些 Repositories 是我該關注的，而不會陷入一堆 Repositories 之中。整理乾淨的 Repositories 也能夠給予別人一種整理乾淨、可讀、可維護的感覺。\n整理後就只剩下5個 Repositories\n如何移動 Repository Organizations 建立好後，只需要進到 Repository \u0026gt; Settings，將頁面拉到最底就會看到 Danger Zone 的區塊，這裡就有 Transfer ownership的功能，就可以將 Repository 移到特定的 Organizations了。\n以上的方法是我自己整理 Repository 時所使用的方式，這方式似乎是有一點濫用了 Organizations 的功能，不過我想這些 Repositories 都是自己在維護的，用這方法更能夠一目了然各 Project 目前的狀態，Z ＞ B 的情況下這樣用也無妨。\n另外我也想收集一下有用 Github 的各位，你是如何整理你的 Repository 呢？歡迎在底下留言跟我分享。\n","ref":"/post/2019-01-21_organize_my_github/"},{"title":"Swagger Codegen — 自動產生文件的工具","date":"","description":"","body":"寫 Web API 的開發人員多少都用過 Swagger 這個工具，結合到 ASP.Net MVC 專案上，就會讀取程式碼裡的註解以產生 API 文件頁面。不論是加新 API 或修改 API，只要記得增加/調整註解，Swagger 就能夠產生出最新的 API 說明文件。也因此我再也沒有另外手動維護任何靜態文件了。\n但若是真的需要另外產生一份 API 文件時，難道只能手寫一份嗎？\nfrom: https://petstore.swagger.io/\n由於工作流程的需求，並不是所有人都知道 Swagger 的存在，而且 Swagger 是直接結合在 ASP.Net MVC 專案上，通常為了安全性只會讓開發環境可以使用 Swagger，其他環境會將 Swagger 關閉。另外也不是所有人都能存取開發環境。為了讓沒辦法看 Swagger 但又有看文件需求的人也可以看文件，就有了產生靜態文件的需求(嘆)。\n身為懶惰的開發人員，實在不想再另外維護一份文件，只能上 google 找找有沒有什麼比較好的工具可以簡化這個作業，就讓我找到了這個工具 Swagger Codegen。\n它的網頁上就清楚明白的說它可以產生 API Client 及 Documentation。\nfrom:https://github.com/swagger-api/swagger-codegen#overview\n看完就直接動手試驗了，我一開始直接參考文件裡 Getting Started 這個段落，安裝了 Java JDK、Maven，嘗試著去 Build 出一個 Swagger Codegen，但一直 fail 在 unit test，想說怎麼會連 test 都不能 pass？會不會是我的環境還缺了些什麼？文件翻來翻去看了老久，終於注意到文件開頭的 Build Badge 。\n沒錯！3.0.0的版本 windows Test 是 Fail的…Orz\n由於我對 Java 沒有很熟，也不想花時間去改 Code，直接 checkout 2.4.0 的版本重 Build 後，總算是 Build 成功了，試著產生文件也成功了(灑花)，但人生也己經浪費 2 個多小時。\n就當正要將這個過程做個記錄的同時，又在文件中看到一句話。\n以後文件要先看清楚，人生可以不用多浪費 2 個小時。不過也多學了怎麼 Build Java 程式，也算是個意外的收獲。\n以下的操作方法就是直接從官方下載 Jar 來操作，省去了安裝與建置的時間。\n操作方法： 先下載官方已經發行的穩定版本 點我下載 打開 command line 輸入以下的指令\njava -jar swagger-codegen-cli-2.3.1.jar generate -i http://petstore.swagger.io/v2/swagger.json -l csharp -o /var/tmp/api_client 這裡有三個參數：  -i：指定你的 swagger.json取得路徑，如果你的 Web API Application 已經使用 Swagger，你可以直接換成你的 swagger.json url。這裡的例子用的是官方Sample -l：要產生何種語言的文件。codegen支援的語言蠻多的，詳細內容可以到官方 github 查閱。 -o：將文件產生到指定目錄  沒意外的話，就可以得到一堆檔案。\ndocs 目錄裡就有將你的 API 轉成 Markdown 格式的文件，你就可以直接拿來使用而不需要再動手另外再寫一份文件，同一件事別浪費時間做兩次。\n而 src 目錄是有可以拿來 build 的 sample code，你可以用 Visual Studio 打開 IO.Swagger.sln，就是一個可以直接呼叫 API 的簡易程式，還附有 unit test ，建置之後試著執行 Unit Test，是真的可以 run 的。\n心得 若公司是有像是 SharePoint、Wiki 這類的 KM 工具，要求將 API 文件上傳到這類的系統，就可以使用今天介紹的工具，產生出 Markdown 文件來上傳。若可以結合 CI/CD 流程，每次上版時就自動產出相關文件，並自動上傳更新，讓文件能夠隨著程式碼一併更新，如此就能夠讓文件活起來，成為活文件。\n今天若是一個要界接 API 的 Developer，也可以使用 Swagger-Codegen 先自動產生出這些 Sample Code，讓 Sample Code 成為基底，在開發速度上也能夠有所助益。\n參考資料  github swagger-api/swagger-codegen github chenjianjx/swagger2html ","ref":"/post/2019-01-15_swaggercodegen/"},{"title":"人生的十字路口","date":"","description":"","body":"人生總有一個又一個的選擇，小從今天吃什麼，大到到底該不該換工作等人生職涯選擇。但不論做下何種決定，這些決定累積成為了現在的自己。 人生總有一個又一個的選擇，小從今天吃什麼，大到到底該不該換工作等人生職涯選擇。但不論做下何種決定，這些決定累積成為了現在的自己。 人生總有一個又一個的選擇，小從今天吃什麼，大到到底該不該換工作等人生職涯選擇。但不論做下何種決定，這些決定累積成為了現在的自己。\n「人生就是不斷的選擇」 忘了是在何時聽到這句話，但直到現在仍然十分認同這句話所暗喻的意義。\n1/8晚上在引導者聚會的主題是「人生的十字路口」，Vince 介紹了他前兩年去參加引導者論壇時所參加的一個 Session -『交叉路口』（Crossroad）。\n這個桌遊是由東京『慶應大學』（Keio University）的『吉川肇子』教授（ キッカワ トシコ; KIKKAWA TOSHIKO）根據 1995 年的日本阪神大地震於 2003 年所設計出的『模擬遊戲』，同時於 2004 年時在京都大學正式發售，並已申請註冊智慧商標。\n當你遇上這些難題時，你會如何選擇呢？ 試想：\n\u0008[角色]如果您是社區的義消 [情境]發生大地震了！你正在海岸規勸民眾離開。但這時傳來海嘯警報，20分鐘後大海嘯即將來襲。您會留在原地，繼續勸導疏散嗎？ [角色]如果你是一個上班族 [情境]你所任職的工作是個穩定、不需要加班、每天準時上下班。正當你覺得工作不會有任何變化時，你意外獲得另一個新工作機會。而這新工作除了能夠給予你更好的薪資外，極富挑戢性，但必須離開台灣到外地工作，你會去嗎？ [角色]如果你是一個公司基層主管 [情境]你的部門裡有一個員工與老闆發生了嫌隙，老闆盛怒之下要求你把這個員工給開除，並讓這個員工以自願離職的方式離開公司。你會遵從老闆的要求來處理這個員工還是拒絕呢？ 遊戲方式 每個人寫一個自已實際碰過或是聽過、看過的難題，在紙上寫上「角色」與「情境」，並以封閉問題格式來撰寫。\n寫完後每個人輪流說明自已所寫下的難題內容，先進行詢問與會者會做下何種決定以進行第一輪的投票。投票後先請票數少的一方先說說為什麼做這個決定，之後再請另一方表達不同的看法。\n經過一輪討論後，就可以再進行第二輪的投票，這時票數可能會有一些變化，就可以讓想法改變的人再說說原因。\n結束後就換下一個人再重複上述的流程，直到所有的難題都被討論過。\n活動心得 每個人因為有著不同的經歷而有不同的觀點，在同一個問題每個人所做出的決定自然也有所不同。每一個難題雖然是以封閉問題的形式被提出來，在過程中每個人都可以為自己的決定提出看法，在這樣的過程中參與者彼此互相交換看法。而難題之所以是難題，有時是因為自己對於這個選擇可能沒有較為明顥的觀點，以致於選擇那一邊似乎都不對，或是心中捨不得另一個答案。\n也許好好的問問自己，自己最在乎的是什麼？內心的渴望、自我又是什麼？也許往後再次站在十字路口上時， 就能夠心無罣礙的做下自己的決定，創造獨一無二的人生。\n參考資料  不會睡著的防災課：日本防災遊戲「十字路口」翻轉你的災變想像 【生命中的一堂課】@Crossroad: An innovation tool for facilitation @IAFKorea2017 ","ref":"/post/2019-01-10_crossroad/"},{"title":"kodofish 是誰？","date":"","description":"","body":"一個寫了十多年 ASP.Net 的資深工程師，曾任職PM、經理 等管理職務，但最愛還是動手寫程式。除了不斷學習各種新技術外，Agile、Scrum、DevOps…等實務也是不斷探索與學習的課題。\n","ref":"/about/"},{"title":"18年回顧及19年新目標","date":"","description":"","body":"18年的最後就是看著五月天的\u0008跨年演唱會直播、吃著前兩天發現的起家雞韓國炸雞中度過，想想這兩年都是待在團隊內擔任 Team Member 的角色，也因此大多數時間都是在練開發技\u0008能，年終結束了，來對自己做\u0008個人回顧。\n工作 18年在工作上並沒有太大的發展，五月份換了份新工作，光熟悉工作環境就花了不少時間，比預期來得多上許多。不過也學了一些過去沒接觸的技術；Q4 負責一個新產品的開發工作，目前已經差不多接近收尾\u0008階段，屆時在把這三個月的過程做個回顧。 19 年還有個多人連線產品要開發，這\u0008會是個較大的挑戰。\n學習 今年比較特別的是學了引導與薩提爾，引導包含了 ORID、團隊共創、深度匯談 這三個課程。這些學習對於我在工作上並沒有太直接的幫助，但對於人與人之間的互動與反應有不少新的體悟，但一直沒有什麼機會可以拿出來反覆使用，這點讓我覺得空虛。\n也很幸運的報到了李崇健老師的「從自我成長到生活運用」工作坊，讓我發現了自己的冰山，\u0008我已經漸漸的在\u0008覺察\u0008自己情緒的變化，進而試著探索這些情緒\u0008究竟是如何發生的。雖然沒辦法每次都有答案，也許在累\u0008積了許多的\u0008覺\u0008察後\u0008會慢慢找到答案。\n與工作有直接關係的學習就是上了 Visual Studio 極速開發、重構與TDD實戰操練營、實例化需求。目前已經是相當熟悉操作快速鍵與 Vim 在 Visual Studio 上的操作，平時開發工作也都以 TDD 為主要的開發方式。不過最近總覺得有幾個地方不太順，雖然當下都有以其他替代方式來處理，但應該還有更好的做法，得再研究一下。\n實例化需求還沒有比較實際的應用，2019年初應該有機會可以拿來用用。\n新的一年\u0008學習的重點會放在與本業相關的能力上，像是重構、Design Pattern、OO \u0008Princ\u0008iple、Architecture\u0026hellip;等，有幾本技術書一直沒有\u0008把它K完，也藉此重新練一次基本功。 \u0008\n閱讀 以前我其實很懶得閱讀，雖然買了許多的書，但真正拿起來好好看過的少之又少。從 2017 年開始被推了許多書坑後，家裡的書成爆發性的成長。直到今年才開始讀了幾本書，今年讀了這幾本書：\n 薩提爾的對話練習：以好奇的姿態，理解你的內在冰山，探索自己，連結他人 激發員工潛力的薩提爾教練模式：學會了，你的部屬就會自己找答案 人生沒有平衡，只有取捨 單元測試的藝術, 2/e (The Art of Unit Testing: with examples in C#, 2/e 精實開發與看板方法 看板實戰 看板实战（只看了一半） 學問：100種提問力創造200倍企業力 賽斯．高汀的戳盒子宣言：啟動未來的行動指南  書\u0008看得不多，\u0008\u0008\u0008而且真的拿來用的部份\u0008不多，\u0008只看不用等於沒有用，所以 19年的目標除了要增加閱讀的時間外，也要將每本書訂下應用它的目標並實踐。\n\u0008社群活\u0008動 今年算蠻熱衷參加社群活動的，不論是 Agile Community、Agile community in 內湖、C.C Agile 等，一共參加了 32 場，另外\u0008還參加了Agile Tour 2018 台北站的志工。\n\u0008\u0008參加社群活動是讓我自己可以走出公司外與其他人交流的機會，這一年也\u0008認識了蠻多敏捷圈的夥伴，在這一路上獲取了不少經驗與心得。\u0008\n參加了這麼多，也聽了很多人分享，取之於社群、用之於社群，總覺得對於社群沒有什麼付出，\u0008\u0008所以 19 年的目標是\u0008是能夠有自己講 2 場社群分享，回饋一下社群。\n財務自由 18 年開始有試著重新開始做一些投資，財務要重新起步相對來說\u0008算是蠻晚的了。19 年有一些家庭預計的支出，\u0008\u0008評估起來財務要有什麼樣爆炸性的成長應該是不太可能了。總之專注在購買資產上，小心支出，也想\u0008在新的一年建構另一個被動收入來加速\u0008財務自由的\u0008目標上，目前已經有一些方向了，能不能成\u0008也不太確定，總之先做了試試看。\n健康 年紀越來越大，剛始發現身體有越來越差的狀況，雖然還未算是什麼病痛，但開始影響日常的生活與工作了。18 年雖然有試著讓自己去運動，但持續不久。19 年要把一些時間撥給運動、健身上\u0008頭。\n做隻狗 VS 做頭狼 18年上了 Daniel 的 CSPO，講了個黑暗森林\u0008的故事，剛好與我這兩年一直在思考的問題相同。在18年\u0008我還沒有找到個答案，在上了這麼多課、參加了一堆社群活動，總覺得自己是越來越迷惑了，因此在 19 年我想多花點時間在探索自己內在及未來的職涯上\u0008，就繼續在19年找這個答案。\n過去受過不少\u0008貴人、朋友的相助，在此感謝。\u0008\u0008在人生的這條路上跌過不少跤，也謝謝這些曾經讓我跌跤的人與事，有你們讓我知道那裡還有成長空間。新的一年讓我們繼續追尋美好的事物吧\u0008。\n","ref":"/post/2019-01-01_review2018/"},{"title":"再一次重新學習「重構與TDD」","date":"","description":"","body":"六月份安排兩天時間去參加了 91 主講的 『重構與 TDD 實戰營』，這門課早在三月時就已經報名了。但當時其實有點猶豫，猶豫什麼呢？早在前2年就上過TDD的課了，也不斷的在實踐，重構能力不敢說足以飛天，但跑在地上應該也是不成問題吧，但衝著 91 開的課，還是硬著頭皮報名下去了。\n這兩天，完完全全被 Diss 到爆啊！！！！！ 以為是跑在地上，沒想到根本是只有在地上爬的等級 Orz\n光第一天的 WorkShop ，心想列個測試案例有什麼難的？事實是，好的測試案例是經過排序且都是有目的，可以在 TDD 的過程中一步一步前進，將產品堆疊出來。 即便 Joey 再次示範後，讓我們再做另一個 WorkShop，仍然無法做完全漂亮的測試案例。\n而 91 竟然可以直接拿我們 WorkShop 寫出來的爛 Code，直接重構給我們看，這種硬底子的實力絕對不是事先 Set 好的內容。而且還可以同時帶 Java、PHP、.Net 不同的語言的同學，上課時還抓出「疑，這段 Code 有換人寫哦，應該是寫 Java 來接替的。」\n上完後慶幸還好當時有報名，讓我知道原來我可以如何善用我的斧頭，讓本來可能只能發揮 10% 功力的斧頭，瞬間解除封印。但重點是斧頭從木斧變成鐵斧後，使用的人也要強化自己的力量，才揮得動，這門課最重要的就是讓你知道你可以怎麼樣強化你的力量，讓你可以配得上用這把鐵斧。\n這門課讓我學到3件事\n人生最可怕的就是你不知道你不知道 上課前我覺得 TDD、重構就是那樣了，能有什麼不一樣的嗎？上完課後的感想就是「無知是幸福的，同時也是可怕的」。\n知道不等於會 第一天的 WorkShop ，Joey 已經示範過完整的 TDD 與重構流程，晚上許多人想爭口氣重做一次 WorkShop 練習，希望能夠扳回一城。但事實上有進步，但仍然不到如同 Joey 一般的水準。需要不斷的練習、練習、練習，才能夠變成自己的內功。\n天下武功、唯快不破 很多人都說開發都沒時間了，那有時間寫測試？為什麼沒時間？撇除其他你不可以控的因素外，你唯一能夠改變的就是寫 Code 的速度。當你重構一個動作可能要花一、二分鐘，而且還有可能 Complie Error，就要更多時間 Debug；而我可能只要 10秒（這算久的），我還有把握不會Complie Error。一個動作的時間差距可能就有2分鐘了。假設一個重構需要30個動作才能做完，可能需要一個小時，而我可能五分金鐘就做完了，剩下的55分鐘我就可以寫更多有效的測試來提高程式品質。\n","ref":"/post/2018-07-01_tdd_and_refactoring/"},{"title":"“打造” 自組織團隊 心得","date":"","description":"","body":"自組織是什麼？自組織的團隊又是什麼？在參加由王晶老師說分享的*\u0026ldquo;打造**自組織團隊**後，我對於**自組織**有了這麼一點點認識。\n一開始就被王晶老師所帶的活動給驚訝到了。\n活動很簡單，所有人在場地內各自找兩個人，並且移動自己站在兩個人的中心點，王晶老師還暗示我們移動速度不用快，避免受傷。\n現場應該也有5、60人吧，原本還以為要花上一段時間才所有人才能夠到達一個平衡，實際上大約花了51秒，所有人就到達平衡了。\n王晶老師要我們想想，如果你是個 Manager，由你來指揮每個人的移動的話，你覺得需要多少時間？\n能夠自組織的團隊真的很棒！\n群體是如何自行組織的？ 在上面的活動中，我觀察到一個群體之所以能夠自組織有以下的幾個要素。\n  簡單的規則 給予簡單的基本規則，這些規則也要給予彈性，如此團隊才能在不傷害彼此的情況下自由的發展。規則太多、太複雜，就如同為團隊加上許多的枷鎖，限制住團隊成長空間。\n  信任 團隊成員彼此互相信任，相信每人個人都能夠達成自己該完成的目標，專注在自己負責的工作上，而非互相監督。\n  能夠控制自己的行為 控制自己的行為是非常重要的，每個人都會發揮自己的影響力，而影響力可能會在不知覺中發揮影響。正向的影響會讓團隊能夠往更好的方向前進。\n  擁有一致的目標 團隊有一致的目標才會向著相同的方向前進，如同航行在汪洋中的船，船員。\n  行動的自由 每個人在團隊中都能夠有行動的自由，在不打破規則的前提下，要做什麼、怎麼做都應由團隊自行決定。\n  清楚的邊界 給予團隊清楚的實體邊界，就像放牧的綿羊，平時讓綿羊自由的吃草，但又不會讓綿羊離太遠。\n  如何讓團隊成為自組織團隊 王晶老師說自組織團隊與其說它是個目標，它更像是副作用，只要給予團隊足夠的自由與彈性，團隊就會慢慢的擁有自組織能力，當然 Agile Leader 更要時時觀察團隊，在團隊快走歪時，將團隊拉回正軌。\n我會讓團隊有以下的目標/態度：\n 團隊找出共同目標 培養成員擁有成年人的態度 給予嘗試/挑戰的機會  我認為團隊在走向自組織的路上，會需要如同 Authority Matrix Model 一般，覺察團隊目前正處於那一個階段（Manager Lead、Self-Manager、Self-Design、Self-Goveming），在不同的階段中給予團隊不同的彈性，避免變化太快造成團隊的無所適從。\n","ref":"/post/2018-05-23_self-organizing/"},{"title":"Agile Taipei 海盜年會：聊一聊『隱藏的質量』心得","date":"","description":"","body":"這次參加了由 AgileCommunity.tw 舉辦的Agile Taipei 海盜年會，這次邀請邰曉梅老師來台灣分享關於軟體品質的觀點。\n昨晚參加由 AgileCommunity.tw 邀請了曉梅老師來分享『隱藏的質量』。做為軟體工程師這麼多年，也時常會遇到老闆問目前專案的開發品質為何？過去我也僅止於提出 QA 測試出來的 Bug 數、Bug 收復速度或是 Bug 正在收斂中或是擴散中這些可以被「量化」的數據。似乎只要 QA 測不出 Bug 或是 Bug 數非常少，產品的品質就是非常好。\n在曉梅老師這次的分享中提到了過去我所沒注意到的觀點。\n品質是主觀的 為了讓我們能夠體認這個觀點，曉梅老師讓我們以同樣的測試案例進行一次測試活動，每個人所測試出來的結果不僅不盡相符，對於品質的滿意程度也不完全相同，這樣的結果與平時工作情況是類似的。即便 QA 已經依據測試計劃完整的測試過產品，但在心裡仍不禁懷疑產品品質是否已符合客戶、使用者、老闆、團隊的要求？而我們又有多少的時間與資源去進行無止盡的測試？\n常見的軟體開發流程會像是這樣\n 需求確認 \u0026gt; 需求分析 ＞ 開發 ＞ QA 測試 ＞ 產品上線\n 絕大多數情況都是將 QA測試作為品質的最終檢查點，但這種方式一但發現產品的缺陷或系統設計上的問題時，修正它所帶來的成本是最大的。\n而跑 Agile 的團隊，在 User Story 都會定義 Accept Criteria，然而有 Accept Criteria 是否就足夠呢？Accept Criteria 僅能規範這個 User Story 它的驗收標準為何，然而一個系統裡元件與元件之間的交互作用下是否會產生其他未知的 Bug 呢？\n測試除了已知要測試的部份（Plan Base Test），更應該專注於「未知部份」的探索測試，配合測試左移、Test Early 去盡早找出問題，在開發過程的各階段觀注產品質量的變化，視覺化質量的趨勢（Quality Trend），而這應該是 團隊所有成員一起關注，而非只有 QA 人員做最後的把關。在關注的過程中分享已知的部份（例如已測試的部份、結果為何），也應該對於未知的部份提出進行討論（要不要做？影響程度？），除了讓每個人對於品質能夠有相同的認知外，也是讓決策者能夠有足夠的資訊做下正確的決策。\n8/3 更新 曉梅老師在活動中有帶一個 \u0026ldquo;三角形測試\u0026rdquo; 的小活動，讓我們體會到即便現場有一百多人，提供了相同的測試案例，做相同的測試，每個人對於測試後的結果、感受都是不一樣的，透過這個活動更能體會到品質是主觀的論點。\n有興趣可以到曉梅老師的部落格去看一看。\n邰晓梅 的博客 - 三角形测试的小实验\n線上錄影觀看 當天的活動內容有請到 Tibame 來現場錄影，只要註冊 Tibame 的帳號就可以免費線上觀看當天的錄影內容。\n敏捷開發『隱藏的質量』問題- Agile Taipei 海盜年會\n","ref":"/post/2018-05-18_hidden_quality/"},{"title":"System Thinking 工作坊參加心得筆記","date":"","description":"","body":"這是我第一次參加關於System Thinking的工作坊，在短短約四個小時的時間，大概略知什麼是 System Thinking，但要熟練使用在日常工作或生活中，肯定還需要一段時間的學習與練習。\n 年初 Taco 桑在新竹辦一整天的 System Thinking WorkShop 其實心裡就一直掙扎到到要不要衝到新竹去參加，就在猶豫掙扎的過程中票就賣完了😱\n後來看到在台北開了2場 系統思考工作坊 社群日間版，當然就是想也不想的先報名再說。\n什麼是系統思考（System Thinking）? 在 Taco 桑的投影片裡是這麼說的\n 系統思考將有助於我們發現問題的根本原因，看到多種可能性，從而讓我們更好地管理、適應複雜性挑戰，把握新的機會。\n 看到了嗎？系統思考不單單只是為了發現問題的根本原因，更重要的是能夠更好地管理並從中把握新的機會，而這會是你比其他人能夠更進一步搶得先機的能力。\nWorkShop 內容 分組活動 活動一開始 Taco 桑先帶著大家先自評自己對於 System Thinking 的理解程度自己評分，並依據分數高低圍成一個圈圈，再依序將參與者打散到各組。\n從這個簡單的分組活動 Taco 桑開始帶著大家回想剛剛的過程中發生了什麼事。\n 自評：每個人先依據自己對於 System Thinking 的理解程度自評分數。 圍成圈圈：很奇妙的大家就會自己組成一個圈圈，一開始圈圈不夠大，有些人組不進來，大家就開始自我調整，將圈圈放大。 見縫插針：放大的過程中就開始會有人只要看到小縫就插進去，讓自己盡快成為圈圈的一份子。  在這過程中 Taco 桑讓我理解到\n 每個人都是一個系統，而系統與系統間會有相互影響\n 活動：用畫圖來表示如何做早餐 在這階段 Taco 桑讓我們每個人用一張 A4 紙試著畫出如何做一頓美味的早餐，我用了我笨拙的畫圖功力努心畫出了這幅畫。\n畫完後與同組成員互相交流彼此的畫作，可以發現每個人對於畫畫的表現方式都不盡相同，但相同的是大多都會用箭頭來表示流程，用各自獨立的物品來表現動作。\n接著以組為單位來畫一張如何做早餐的圖。\n在這活動中整組畫出了這張圖，看得出來圖上的六個區塊是由不同的人畫出來的，但我們卻能夠彼此了解夥伴們畫的是什麼，這是個 Share Understanding 的體現。\n在這裡帶出了在團體進行 System Thinking 時的一個精神，「一顆心、一張紙、一個要解決的問題（目標）」。\n系統的構成 物件、物體、元素：在系統中的任何物體都是系統裡最基本的單位，而每個單位又可視為是個獨立的系統。 連結：物件之間的交互影響關連，在系統裡每個物件可能有關連可能沒有關連，而這關連會是個因果關係。 目的性：幾個關連可能會形成某種目的性，進而產生一個事件。\n系統語言 在系統思考裡我們用系統語言來表現系統的運作方式，最主要有三個元素。\n變量（Variables）：可以有數據來表示的單位，例如：成本、利潤。 環鏈（Links）：是指任兩個變量之間的因果關係，例如：訂單數越多→營業額越高。 環路（Loops）：是指數量環鏈所形成的迴圈，例如：訂單數越多→營業額越高→利潤越高→行銷預算越高→品牌知名度提升→訂單數越多 用變量、環鏈、環路所畫出來的圖則稱之為 CLD（Causal Loop Diagram）因果循環圖。\n以麥當勞早餐為例子 第一步、找出變量 找變量的方式有兩種，一種是從 Domain Know How 去找，另一種是從現有的分析數據去找。\n第二步、找出變量間的環鏈及正/負相關性 把每個變量分別比對，找出之間的環鏈，並對於環鏈的相關性進行定義，這步驟相當重要，定義正確與否會影響最後對於系統運作方式的判讀。\n環鏈有分為正相關及負相關，會用 S/O 或 +/- 來表示正向或負向關係\nS/O：Same / Opposite\n+/-：正相關、負相關\n第三步、找出環路 變量夠多、環鏈都找出來的情況下就可以在系統中找出環路，環路會形成圈圈，在這圈圈裡的變量代表彼此互相影響。而環路又分為加強環路（Reinforce）及平衡環路（Balance）\n例子：平衡環路 顧客滿意度（A）→ 銷售量（B）→ 等待時間（E）→ 顧客滿意度\n顧客滿意度越高，造成銷售量越高；銷售量越高，造成客戶等待時間越久；而客戶等待時間越久，則造成顧客滿意度越低。\n例子：加強環路 銷售量越多，則來客數越多；來客數越多，則銷售量越多。 小組討論 經理人為了挽救預算的系統思考案例。在預算不足的情況下身為一個經理人如何用系統思考來緩解預算不足的壓力。 我的反思 平常在設法解決一個問題時通常會去思考這個問題所發生的原因，只要解決這個原因通常就能解決這個問題。但更多的是為了解決今天所發現的 Bug 所寫的 Code，明天又會產生出新的 Bug 。\n尤其在大型系統，一個問題很有可能是經由不斷的互相影響所產生的，此時冒然去修改它可能會得到完全無法預期的結果。而系統思考就是幫助我們能夠在尋找問題的過程中先看見全貌找出因果關係。這時再下手去解決它勝率就會大得多了。\n除了用來解決問題外，我認為系統思考應該也可以用來分析個人職涯的現況，了解自己身處的位置，定出未來的執行計劃與可能的機會應該也挺不錯用的。\n","ref":"/post/2018-04-12_system_thinking_workshop/"},{"title":"Agile Tour Taipei 2017","date":"","description":"","body":"Agile Tour Taipei 2017 參加 Agile Tour 活動第三個年頭，雖然天氣不太好，不時飄著細雨，但並不能阻擋促成這場大會的志工們。感謝這群志工，有你們才能讓我們能夠在這個場合中互相交流學習。\nAgile In Transition and In Business World — Mick Chung 一早就由 Mick 分享 Agile 團隊在商業世界裡所面臨的挑戰，以及如何以 Agile Contract Team 的模式來解決傳統合約難以使用 Agile 的手法來進行產品及服務的開發。Agile Contract 今年不斷的在社群中被拿出來討論，可能台灣的環境仍然以如期、如質、如成本的觀念在談合約。現今比速度的時代，這個月的規劃可能下個月就要做調整了，傳統合約無法給予彈性的情況下，變成 Do Agile 而非 Be Agile。\n敏捷商業分析 — Lisa Chu 這一節的分享真的比較適合做產品規劃/企劃的人來聽，個人的感覺目前在 Run Agile 的還是以軟體開發的 IT 人為主，然而產品規劃者若沒有敏捷思維，容易變成一個公司各自為政的狀況。\nLet’s build an User-Centered Team — 張朝智 Agile 有幾個可以幫助了解 User 的工具，像是 Personal、User Story…等，但做了這些難道就真的了解 User 嗎？在這一節中講者分享了 UX、UX researcher 的經驗，包含該如何訪談使用者、專業的觀察室…等。我以前任職的遊戲公司其實也有相關的設備、設施，但卻從來沒能夠了解用途，在這一次的分享中更瞭解了這些設備的用途。\n高效溝通 — 揭開促進團隊效能的密碼 — Percy Percy 分享六個團隊溝通的技巧，內容真的很豐富，可惜時間不夠，最後也只能分享其中二個技巧。打破以前認為不可能的事，其實不是不可能，而是我不會、不懂得運用。\nGet better at Refactoring — Stanly Lau Stanly 是來自 Odd-e 的敏捷教練，分享的也是我近來最有興趣的主題。Stanly live demo 了 refactoring 常用的幾個方法，更分享了他認為要精進 refactoring 的幾個方向，這也啟發了我明年所訂定的目標與方向。\nRetrospective 今年的收獲真的很多，在學習 Agile 的路上也一路認識許多一同在這條路上努力的前輩與同好，回顧 2017 年也做了不少事來改變自己讓自己能夠不斷的成長，but 總有可以學習仿效的人事物。2018年即將到來，期望自己能夠繼續前進。\n","ref":"/post/2017-12-18_agile_tour_taipei_2017/"},{"title":"敏捷24小時戰鬥營","date":"","description":"","body":"敏捷24小時戰鬥營 人生第一次參加類似黑客松的活動，在活動訊息出來時還很興奮的傳給同事看，想辦法鼓吹看有沒有人一起入坑。\nbut…人算總是算不過天，沒人想跟我一起去玩，只能當場找人組隊。\n當天六點準時下班，但我太小看週五下班時的交通車潮了，公車坐了一個多小時到了捷運圓山站，早知道坐捷運了…Orz\n到了活動地點己經都八點了，現場大家都組好隊了，只能先等等下一場各組Demo 想法的Session開始，再決定要加入那一個隊伍。\n就在旁邊觀察各組在做些討論的同時，Diro、Jared 看我可憐(?)直接問我要不要一起組隊，就這樣加入了團隊，現在想想這一切都是緣份啊～\n快速的認識 Diro、Jared、Jess、Laura、小林，以及後來再加入的Arthur及Dino，就這樣八個人組成了這個團隊。\n一開始先同步了一下要進行的方向，就馬上先決定要用那些技術來實作。在了解各自的能力後就快速決定好要使用 Web 前端 ＋Web API 的方式來實作。\n各自的分工為\nArthur：Web API 架構設計與實作\n我：德鐵 API 串接與實作\n小林：帶著 Diro、Jared、Jess、Laura 一起寫 Web 前端\n只有小林熟 Web 前端，所以幾乎是大家邊學邊做 Web 前端，在24小時內拼出很棒的網頁來，真的很厲害。\n決定方向 在正式開工前，Arthur 提議要不要試著用 Impact Map 及 User Story Map 先來決定我們的 Road Map，並決定出我們的第一版 MVP 會是什麼樣的產品。這事初看似乎又佔掉了一些可利用的時間，但事後來看當初做這件事是非常正確的，因為所有人都非常明白要做出什麼樣的產品，並專注在第一個 feature 的開發上。\n我所負責的工作其實算是相當單純的，就是讀德鐵 API 說明文件並實作串接，但後來才發現這一切都不是這麼簡單的啊。\n首先，文件與 Sample Code 故意埋了一些地雷，每一支 API 所埋下的地雷又不盡相同。本來是想先用PostMan 先試著打打看，才發現 API 的認證機制裡必須包含當下 UnixTime Stamp 一起做 MD5 產生。試了幾次後發現 Time Stamp 有個容忍值，不能離當下時間太遠，否則會認證錯誤。\n第一回合-開始 我決定先寫個簡易的 SDK ，再加上 Unit test 來加速我的測試過程。就在我研究 API 規格的同時，Arthur 己經在建立整個 API 專案的基礎架構， 等到我己經有個簡易的 Production Code及 Unit Test 可以反覆進行測試時，時間己經來到凌晨12點半了，此時才是戰鬥的開始。\n測試了約莫一個小時，第一個 API 仍舊無法順利打通，百試不得其門而入的情況下，Member 們也很關心到底順不順利，只好找人求救了。\nBut…現場除了一群挑戰者之外，僅剩 John 和工作人員，教練都回去休息啦 XDD\n只好問問 John 。但 John 就像是 RPG 遊戲裡的 NPC 角色一般，要問對問題他才會回答你…Orz\n最後我成功拿到一點點提示 XDDDD\n前面我為什麼會說文件與 Sample Code 故意埋了些地雷，因為剛拿到的提示是文件裡都沒有寫的…Orz\n就在不斷的嘗試，與不斷的推測 API 的處理邏輯，終於在4點半左右完成第一個 API 的串接，這時候我的精神也燃燒得差不多了，同 Team member 也有幾個先回家梳洗休息一下，距離下午五點的 Demo 剩不到12小時，為了能夠再支撐剩下的時間，就趴著小睡一下。\n第二回合-休息後再繼續 六點半，一直照顧我們吃喝拉撤的 John 帶來了麥當勞早餐，小睡了一會又吃了早餐精神似乎就回復了大半，回家梳洗的成員也一一的回來了。大家一一的同步彼此的進度及接下來要做的部份後，我也開始進行第二支 API 的串接。\n有了第一支API的經驗後，第二支API 在串接時當然也不意外的又撞牆了XDD。但很快的就把牆給撞過去了，大約九點左右就完成了第二支 API 的串接。第三支 API 也很快的在11點左右完成，最後一支也在下午一點左右完成。為什麼這幾支串接可以這麼快的完成呢？因為我直接找了教練來直接與他對測 API ，當場對測完畢。這事告訴我們，只要找到對的人就可以快速的解決問題。\n距離最後的 Demo 剩下四個小時的時間，就在不斷的調整、優化程式並與FrontEnd 進行整合，有空的 Member 就抓緊時間不斷的進行測試並提出優化建議。\n教練的 1 on 1 Review 下午三點，有個與柴叔 1 on 1 Review Code 的機會，柴叔給了我許多的建議，也點出了我許多在實作時沒想清楚的點。像是：\n 我所寫的這些測試不能稱之為 Unit Test，它只是我為了驗證 API 該如何呼叫以及學習 API 的使用所寫出來的程式，它頂多可稱之為 經驗測試。僅止是為了學習而寫的，實際上對於產品的可靠性沒有任何幫助。 應該用更有效的工具學習，就可以省下寫測試程式的時間。例如柴叔就提到了 git 所提供的 command shell 工具，它就內建了許多的指令，例如用 curl 就可以呼叫 API，也內建 md5 編碼的指令。善用這些指令就可以測試 API 了。 我寫了個基於德鐵 API 所提供的功能的 SDK，德鐵 API 有4支，SDK提供的功能也有4個，看似非常合理。但柴叔認為寫SDK的目的應該是為了提供產品整合，不應該依賴實作。例如我們的產品操作流程就是 查詢 \u0026gt; 訂票，兩個步驟，那我的 SDK 就應該只提供兩個功能就好，呼叫德鐵 API 的行為就應該包裝在 SDK 內就好，不需要讓前端知道。 柴叔指出我肯定沒有用 TDD，有用 TDD 的話就不會寫出這樣的 SDK。沒錯因為我想的是該怎麼把 API 串起來，而不是該怎麼實現產品啊。 柴叔觀察了我們許久，發現每個人都只專注在各自的目標在工作，而不是為了團隊的目標，最明顯的一點，每個人對於最後整合的時間認知都不一樣。也的確，大家都很認真的專注在自己要做的工作，而忽略了彼此交流與同步進度。  最後 最後，我們很幸運的被評選為第一名，為什麼說很幸運？我覺得我們每個人都努力的將自己畢生的功力都拿出來了，不過卻沒有很好的整合，因為我們都太專注在自己的工作上了，缺少了彼此與團隊的溝通，中途的 Retro 做得太少，導致最後的幾個小時我們不斷的在做產品的調整。\n身為第一名也不是只有一個名次而己，更取得了 Agile Tour 2017 早鳥票的資格，而 Odd-e 更提供未來任何一門課程的優惠及德鐵訂票系統上車票優惠，這超棒的啊，只是歐洲車票不知道何時才有使用的機會 XDD\n其他人的文章  [敏捷24小時戰鬥營 心得文] Day 1 - 離開舒適圈 [敏捷24小時戰鬥營 心得文] Day 2 - 溝通危機  ","ref":"/post/2017-12-03_agile24thon/"},{"title":"Agile_Neihu_Sprint8 — What’s your trick in retrospective? 你在回顧會議中玩什麼把戲?","date":"","description":"","body":"Agile_Neihu_Sprint8 — What’s your trick in retrospective? 你在回顧會議中玩什麼把戲? 上週參加了「Agile Neihu Sprint 8」的社群活動，主題談的是回顧會議中 Scrum Master 有什麼樣的手法可以引導團隊聚焦並找出團隊可以進行改善的目標。參加這場活動主要也是想多聽聽其他公司是怎麼做回顧會議的，也許有些可以改善的方法是可以在團隊中使用的。\n在回顧會議中可以依循「開始 -\u0026gt; 回顧 -\u0026gt; 探索 -\u0026gt; 進化 -\u0026gt; 結束」五個階段進行。\n開始 這是一開始階段，在這階段要幫助團隊的每個人將注意力拉回到會議中，以確保每個人可以全心投入在這個會議中。可以帶個破冰或 Check in 活動，藉以觀察每個人對於回顧會議的態度、感受，以便在後續的階段中適時採取適當的引導活動。\n回顧 在這階段就正式開始引導團隊進行回顧。先請團隊成員回想這個 Sprint 發生了那些事件，以「產品」、「團隊」、「個人」這三個面向思考，並寫在便利貼上。都寫完後可以用時間軸的視覺化工具依每張便利貼的時間順序貼在時間軸上。就可以引導團隊開始回顧貼在時間軸上的事件進行回顧。\n若從文字上無法輕易理解事件的來龍去脈，可以請團隊成員來說明。\n探索 當團隊成員都對於 Sprint 所有的事件都回顧得差不多時，就可以開始引導團隊找出幾個可以幫助團隊改善的事件。\n 再重新做一次有更好的做法的事件 影響團隊進度的事件 困擾團隊的事件 明明看得出來是有問題的事件，但卻都沒有成員要提的事件。  進化 找出這些事件後，就可以引導團隊找出改善的做法，並且記錄下來，並在下個 Sprint 指定推動負責人進行落實改善，如此團隊成員才會覺得回顧會議是有用的，有用自然就會想繼續開回顧會議，以促進正向循環。\n結束 在結束前可以再和團隊簡短的進行 Review，Review 這次會議團隊達成了那些共識與決定。\n回顧會議的挑戰 在這次的活動中我覺得比較有趣的是和參與者一起討論回顧會議所曾經遇到的挑戰，像是：\n 團隊成員不想開會顧會議。 團隊主管覺得有任何問題都會隨時提出來，不需要開回顧會議。 團隊成員不願意發言。 團隊的決議沒有被落實。  討論的過程中也聽到了許多老司機的建言與方法，身為學習者對於上述的挑戰給不出任何實務上的建議，只能先將老司機的話記在心裡，也許有一天會派上場也說不一定。\n活動頁面 Agile_Neihu_Sprint8 - What’s your trick in retrospective? 你在回顧會議中玩什麼把戲?\n","ref":"/post/2017-09-15_agile_neihu_sprint8/"}]