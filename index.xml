<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kodofish Blog</title><link>https://kodofish.dev/</link><description>Recent content on Kodofish Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Tue, 01 Jan 2019 16:08:39 +0800</lastBuildDate><atom:link href="https://kodofish.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Working Effectively with Legacy Code - CH1 修改軟體</title><link>https://kodofish.dev/post/2020-05-20_working_effectively_with_legacy_code_01/</link><pubDate>Mon, 18 May 2020 20:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2020-05-20_working_effectively_with_legacy_code_01/</guid><description>這一系列文章是我在閱讀 Working Effectively with Legacy Code 這本書的書摘，其中穿插著我對於部份內容的心得。我盡可能的重新用自己的話與理解來寫這一系列文，好讓自己能夠重新整理書中的內容。若對於此書有興趣，也同時被遺留代碼殘害的工程師非常推薦將這本書買回去好好的閱讀。
修改軟體的四個理由 添加新特性 修正 Bug 改善設計 最佳化資源使用 添加新特性與修正 Bug 這應該是一個正在發展中的產品會因為不斷的在現有產品上不斷加上新工能，RD 得不斷的在現有的 程式碼中進行添加或修改。但對於新增功能還是 Bug 的修改，這點對於不同角色會有不同的看法，這是很主觀的。
改善設計 改善設計是另一種軟體修改，在不改變軟體既有的功能及行為下，修改軟體的結構或組織，讓軟體可以更容易維護。但這樣的操作很容易產生 Bug，因此有多數的程式設計師都盡可能不去做這件事，深怕產生了新的 Bug 會被抓出來當戰犯審問。
這樣的操作被稱之為重構(Refactoring)。重構的概念是先撰寫測試以確保軟體現有的行為不被改變，每做一小步的修改就執行一次測試，小心驗證軟體行為沒有被改變。
有一個跟重構很像的行為叫&amp;quot;程式碼清理(Clean UP)&amp;quot;，與重構的不同在於重構會做比較危險的修改，例如重寫程式碼區塊、將部份程式碼抽出成一個 Method…等。
最佳化 這部份與重構類似，但目標不同。兩者都是在不改變軟體功能行為下進行操作，但會改變某些其他東西。不同的是重構改變的是軟體組織或結構；而最佳化改變的是某些資源的使用，例如 CPU 負載、記憶體的使用量。
四個理由的比較 添加特性 修正 Bug 重構 最佳化 結構 改變 改變 - - 新功能 改變 - - - 功能 - 改變 - - 資源改變 - - - 改變 綜合比較添加特性與修正 Bug 的行為相當相似，所不同的在於添加特性改變的是&amp;quot;新功能&amp;rdquo;，而修改 Bug 改變的是&amp;quot;原有功能&amp;rdquo;。</description></item><item><title>Nuget Deprecating Package</title><link>https://kodofish.dev/post/2020-05-18_nuget_depredcating_package/</link><pubDate>Mon, 18 May 2020 19:19:13 +0800</pubDate><guid>https://kodofish.dev/post/2020-05-18_nuget_depredcating_package/</guid><description>今天發現了 Lag 有一段時間的新功能，就是 Nuget.org 支援 Deprecating packages 新功能。 過去 Nuget 在還沒有支援這項功能前，開發者只能一直讓舊版軟體一直掛在 nuget.org 上, 讓使用者繼續使用，或是使用 Unlisting，讓使用者無法繼續搜尋到特定版本的 Package。
而在開放 Deprecating package 後, 只要你是使用 Visual Studio 2019 16.3 以後的版本，在使用 nuget manageer 時, 就可以直接在畫面上看到 Deprecating 的提示。
在 Nuget blog 上就有教你該如何操作 Deprecating package 的步驟，超容易操作。
若是自建 private nuget server 的話，似乎還未釋出 Deprecating package 的功能，只能先使用 enableDelisting 來處理。
參考資料 Deprecating packages on nuget.org Deprecating packages Nuget Server - Github</description></item><item><title>安裝 SonarQube - 為你的團隊建立軟體品質儀表板</title><link>https://kodofish.dev/post/2020-05-05_sonarqube_quick_install/</link><pubDate>Tue, 05 May 2020 13:24:55 +0800</pubDate><guid>https://kodofish.dev/post/2020-05-05_sonarqube_quick_install/</guid><description>從事軟體開發工作已經多年，軟體品質、工程師績效向來是一直難以量化呈現的問題。過去曾看過管理階層試圖以各種方式來定義，但總有許多技術上的問題與人性挑戰。無法量化，團隊就難以對於品質有一致的認知，沒有一致的認知在開發的過程中多少就會有些許的衝突。
而 SonarQube 就是個讓你可以把團隊的軟體品質給數據化呈現出來軟體，也能讓團隊瞭解所開發的軟體是否有些潛在的問題。
如果你無法加以量度，或是無法以數字將之表達出來，那麼你對於那樣東西的所知，則要歸於貧乏之列，或是嚴重不足— Lord Kelvin
這篇來講講 SonarQube 安裝，這篇是我在安裝 SonarQube 時的安裝過程整理，
下載 SonarQube 在 SonarQube 官網 提供了幾個版本可以下載，分為 Community、Developer、Enterprise 與 Data Center 四個版本，可依自己的需求下載適合的版本。由於這次是先試用評估功能，所以就先下載 Community 的版本。
快速啟動 SonarQube 這方式蠻適合想先試用 SonarQube 評估對於團隊的幫助有多少時，可以先用快速安裝來減少前期準備的時間。 將先前下載的 SonarQube 解壓縮並放在適合的位置後，以命令列執行 StarSonar.bat。例如：
$SONARQUBE-HOME\bin\windows-x86-xx\StartSonar.bat 就官方文件上寫的，這樣應該就可以啟動 SonarQube 了，但我執行就看到這樣的訊息。
在訊息的一開始有個 Unable to execute Java command. 的訊息，猜想可能是找不到 java 執行檔, 試著用 command line 去執行 java。
果然!! 找不到 Java，找不到 java 就將 java 加入環境參數內，再重新執行一次。這次就順利執行起來了, 打開瀏覽器輸入 http://localhost:9000/ 看到 SonarQube 的畫面就完成了。
SonarQube - Get Started in Two Minutes Guide 完整安裝 SonarQube 前一節的快速啟動算是可以讓你用較短的時間將 SonarQube 執行起來，並開始試用它。但只要伺服器重新開機就必須手動再重新執行一次，對於長期使用來說並不方便，而且前面也提到過沒有安裝資料庫，未來若是程式升級或是你想要搬伺服器的話，資料有可能是無法轉移的。因此這一節來說說該如何完整安裝 SonarQube。</description></item><item><title>用 CONFIG SET 來變更 redis 連線密碼</title><link>https://kodofish.dev/post/2020-04-23_redis_command_change_password/</link><pubDate>Thu, 23 Apr 2020 16:49:54 +0800</pubDate><guid>https://kodofish.dev/post/2020-04-23_redis_command_change_password/</guid><description>使用 Redis 時為了增加其安全性，不讓其他人可以隨時連進 Redis 進行操作，通常都會設定一組密碼。而密碼的設定除了透過修改 Redis config 之外，Redis 也提供了一個指令可以直接在線上進行修改，而且不需要重啟服務。
這次所要使用的指令就是 CONFIG SET
使用 CONFIG SET 修改除了立即生效外，所支援的參數都與 redis.config 文件內所使用參數相同。
使用上挺簡單的，先使用 Redis-cli 連上 Redis。
使用 Redis-Cli 進行測試 先使用 Auth password 來測試是不是有設定密碼，預設情況下是不會有密碼的，所以 Redis 回給予 ERR Client sent AUTH, but no password is set 的訊息。
使用 CONFIG SET 指令設定密碼 接下來輸入以下的指令
CONFIG SET requirepass &amp;#34;pass&amp;#34; 這段指定就是將 redis 密碼修改為 pass。 CONFIG SET 可以修改的設定相當多，我們這次是要設定密碼，在 Redis config 裡的屬性就是 requirepass。輸入後看到 OK 代表修改成功了。
再次測試密碼 一樣透過 redis-cli 連上 Redis 後, 輸入以下指令</description></item><item><title>讓你的 Visual Studio Code 同步設定</title><link>https://kodofish.dev/post/2019-03-01_vscode_extension_settings_sync/</link><pubDate>Fri, 01 Mar 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-03-01_vscode_extension_settings_sync/</guid><description>Visual Studio Code 是平常工作之外最常使用的編輯器了，不論是寫文件、查 Log、寫 Blog 都是用 Visual Studio Code。平時寫 Code 用的 Visual Studio 2017 本身就有設定檔同步的功能，不論我在公司或在家中使用時，都有一致的操作環環境與體驗。但 Visual Studio Code 卻沒有內建類似的功能，每當我新增了 Extension 或修改了設定，就必須再次在另一台電腦上手動再做一次，有點不方便。抱著這樣的困擾在 Google 上找了一下，就找到了今天想為此寫篇文的 Extension Settings Sync。
Settings Sync 能做什麼？ Settings Sync 有幾個主要的功能。
使用你的 Github 帳號及 Gist 來做為設定檔的儲存與下載使用。 透過快速鍵就可以上傳或下載設定檔 每次啟動 Visual Studio Code 會自動下載設定檔。 設定檔是儲存在 Gist 上，也因此你可以將你的設定檔分享給其他人 Settings Sync 會同步 Visual Studio Code 的幾個設定檔，包含：
Settings File Keybinding File Launch File Snippets Folder VSCode Extensions &amp;amp; Extensions Configurations Workspaces Folder 建立 Github access token Settings Sync 會需要使用你的 Github 及 Gist，所以如果你還沒有 Github 帳號的話，那趕快先去申請一個帳號，才能夠跟著繼續操作下去。</description></item><item><title>整理你的 Github 以及你為什麼該這麼做？</title><link>https://kodofish.dev/post/2019-01-21_organize_my_github/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-01-21_organize_my_github/</guid><description>&lt;p>各位有在使用 GitHub 的攻城獅/程序猿們，你們曾經整理過你們的 GitHub Repositories 嗎？你們的 Repositories 是否充斥著到處 Forks 回來的 Repository，而雜亂不堪？這邊介紹一下我自己在整理 GitHub 的小技巧。&lt;/p></description></item><item><title>Swagger Codegen — 自動產生文件的工具</title><link>https://kodofish.dev/post/2019-01-15_swaggercodegen/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-01-15_swaggercodegen/</guid><description>&lt;p>寫 Web API 的開發人員多少都用過 Swagger 這個工具，結合到 ASP.Net MVC 專案上，就會讀取程式碼裡的註解以產生 API 文件頁面。不論是加新 API 或修改 API，只要記得增加/調整註解，Swagger 就能夠產生出最新的 API 說明文件。也因此我再也沒有另外手動維護任何靜態文件了。&lt;/p>
&lt;p>但若是真的需要另外產生一份 API 文件時，難道只能手寫一份嗎？&lt;/p></description></item><item><title>人生的十字路口</title><link>https://kodofish.dev/post/2019-01-10_crossroad/</link><pubDate>Thu, 10 Jan 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-01-10_crossroad/</guid><description>&lt;p>人生總有一個又一個的選擇，小從今天吃什麼，大到到底該不該換工作等人生職涯選擇。但不論做下何種決定，這些決定累積成為了現在的自己。
人生總有一個又一個的選擇，小從今天吃什麼，大到到底該不該換工作等人生職涯選擇。但不論做下何種決定，這些決定累積成為了現在的自己。
人生總有一個又一個的選擇，小從今天吃什麼，大到到底該不該換工作等人生職涯選擇。但不論做下何種決定，這些決定累積成為了現在的自己。&lt;/p></description></item><item><title>kodofish 是誰？</title><link>https://kodofish.dev/about/</link><pubDate>Tue, 01 Jan 2019 16:08:39 +0800</pubDate><guid>https://kodofish.dev/about/</guid><description>一個寫了十多年 ASP.Net 的資深工程師，曾任職PM、經理 等管理職務，但最愛還是動手寫程式。除了不斷學習各種新技術外，Agile、Scrum、DevOps…等實務也是不斷探索與學習的課題。</description></item><item><title>18年回顧及19年新目標</title><link>https://kodofish.dev/post/2019-01-01_review2018/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-01-01_review2018/</guid><description>&lt;p>18年的最後就是看著五月天的跨年演唱會直播、吃著前兩天發現的起家雞韓國炸雞中度過，想想這兩年都是待在團隊內擔任 Team Member 的角色，也因此大多數時間都是在練開發技能，年終結束了，來對自己做個人回顧。&lt;/p></description></item><item><title>再一次重新學習「重構與TDD」</title><link>https://kodofish.dev/post/2018-07-01_tdd_and_refactoring/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2018-07-01_tdd_and_refactoring/</guid><description>&lt;p>六月份安排兩天時間去參加了 91 主講的 『重構與 TDD 實戰營』，這門課早在三月時就已經報名了。但當時其實有點猶豫，猶豫什麼呢？早在前2年就上過TDD的課了，也不斷的在實踐，重構能力不敢說足以飛天，但跑在地上應該也是不成問題吧，但衝著 91 開的課，還是硬著頭皮報名下去了。&lt;/p></description></item><item><title>“打造” 自組織團隊 心得</title><link>https://kodofish.dev/post/2018-05-23_self-organizing/</link><pubDate>Wed, 23 May 2018 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2018-05-23_self-organizing/</guid><description>&lt;p>自組織是什麼？自組織的團隊又是什麼？在參加由王晶老師說分享的*&amp;ldquo;打造**自組織團隊**後，我對於**自組織**有了這麼一點點認識。&lt;/p></description></item><item><title>Agile Taipei 海盜年會：聊一聊『隱藏的質量』心得</title><link>https://kodofish.dev/post/2018-05-18_hidden_quality/</link><pubDate>Fri, 18 May 2018 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2018-05-18_hidden_quality/</guid><description>&lt;p>這次參加了由 AgileCommunity.tw 舉辦的&lt;strong>Agile Taipei 海盜年會&lt;/strong>，這次邀請邰曉梅老師來台灣分享關於軟體品質的觀點。&lt;/p></description></item><item><title>System Thinking 工作坊參加心得筆記</title><link>https://kodofish.dev/post/2018-04-12_system_thinking_workshop/</link><pubDate>Thu, 12 Apr 2018 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2018-04-12_system_thinking_workshop/</guid><description>&lt;p>這是我第一次參加關於&lt;strong>System Thinking&lt;/strong>的工作坊，在短短約四個小時的時間，大概略知什麼是 System Thinking，但要熟練使用在日常工作或生活中，肯定還需要一段時間的學習與練習。&lt;/p>
&lt;hr></description></item><item><title>Agile Tour Taipei 2017</title><link>https://kodofish.dev/post/2017-12-18_agile_tour_taipei_2017/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2017-12-18_agile_tour_taipei_2017/</guid><description>Agile Tour Taipei 2017 參加 Agile Tour 活動第三個年頭，雖然天氣不太好，不時飄著細雨，但並不能阻擋促成這場大會的志工們。感謝這群志工，有你們才能讓我們能夠在這個場合中互相交流學習。
Agile In Transition and In Business World — Mick Chung 一早就由 Mick 分享 Agile 團隊在商業世界裡所面臨的挑戰，以及如何以 Agile Contract Team 的模式來解決傳統合約難以使用 Agile 的手法來進行產品及服務的開發。Agile Contract 今年不斷的在社群中被拿出來討論，可能台灣的環境仍然以如期、如質、如成本的觀念在談合約。現今比速度的時代，這個月的規劃可能下個月就要做調整了，傳統合約無法給予彈性的情況下，變成 Do Agile 而非 Be Agile。
敏捷商業分析 — Lisa Chu 這一節的分享真的比較適合做產品規劃/企劃的人來聽，個人的感覺目前在 Run Agile 的還是以軟體開發的 IT 人為主，然而產品規劃者若沒有敏捷思維，容易變成一個公司各自為政的狀況。
Let’s build an User-Centered Team — 張朝智 Agile 有幾個可以幫助了解 User 的工具，像是 Personal、User Story…等，但做了這些難道就真的了解 User 嗎？在這一節中講者分享了 UX、UX researcher 的經驗，包含該如何訪談使用者、專業的觀察室…等。我以前任職的遊戲公司其實也有相關的設備、設施，但卻從來沒能夠了解用途，在這一次的分享中更瞭解了這些設備的用途。
高效溝通 — 揭開促進團隊效能的密碼 — Percy Percy 分享六個團隊溝通的技巧，內容真的很豐富，可惜時間不夠，最後也只能分享其中二個技巧。打破以前認為不可能的事，其實不是不可能，而是我不會、不懂得運用。</description></item><item><title>敏捷24小時戰鬥營</title><link>https://kodofish.dev/post/2017-12-03_agile24thon/</link><pubDate>Sun, 03 Dec 2017 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2017-12-03_agile24thon/</guid><description>敏捷24小時戰鬥營 人生第一次參加類似黑客松的活動，在活動訊息出來時還很興奮的傳給同事看，想辦法鼓吹看有沒有人一起入坑。
but…人算總是算不過天，沒人想跟我一起去玩，只能當場找人組隊。
當天六點準時下班，但我太小看週五下班時的交通車潮了，公車坐了一個多小時到了捷運圓山站，早知道坐捷運了…Orz
到了活動地點己經都八點了，現場大家都組好隊了，只能先等等下一場各組Demo 想法的Session開始，再決定要加入那一個隊伍。
就在旁邊觀察各組在做些討論的同時，Diro、Jared 看我可憐(?)直接問我要不要一起組隊，就這樣加入了團隊，現在想想這一切都是緣份啊～
快速的認識 Diro、Jared、Jess、Laura、小林，以及後來再加入的Arthur及Dino，就這樣八個人組成了這個團隊。
一開始先同步了一下要進行的方向，就馬上先決定要用那些技術來實作。在了解各自的能力後就快速決定好要使用 Web 前端 ＋Web API 的方式來實作。
各自的分工為
Arthur：Web API 架構設計與實作
我：德鐵 API 串接與實作
小林：帶著 Diro、Jared、Jess、Laura 一起寫 Web 前端
只有小林熟 Web 前端，所以幾乎是大家邊學邊做 Web 前端，在24小時內拼出很棒的網頁來，真的很厲害。
決定方向 在正式開工前，Arthur 提議要不要試著用 Impact Map 及 User Story Map 先來決定我們的 Road Map，並決定出我們的第一版 MVP 會是什麼樣的產品。這事初看似乎又佔掉了一些可利用的時間，但事後來看當初做這件事是非常正確的，因為所有人都非常明白要做出什麼樣的產品，並專注在第一個 feature 的開發上。
我所負責的工作其實算是相當單純的，就是讀德鐵 API 說明文件並實作串接，但後來才發現這一切都不是這麼簡單的啊。
首先，文件與 Sample Code 故意埋了一些地雷，每一支 API 所埋下的地雷又不盡相同。本來是想先用PostMan 先試著打打看，才發現 API 的認證機制裡必須包含當下 UnixTime Stamp 一起做 MD5 產生。試了幾次後發現 Time Stamp 有個容忍值，不能離當下時間太遠，否則會認證錯誤。
第一回合-開始 我決定先寫個簡易的 SDK ，再加上 Unit test 來加速我的測試過程。就在我研究 API 規格的同時，Arthur 己經在建立整個 API 專案的基礎架構， 等到我己經有個簡易的 Production Code及 Unit Test 可以反覆進行測試時，時間己經來到凌晨12點半了，此時才是戰鬥的開始。</description></item><item><title>Agile_Neihu_Sprint8 — What’s your trick in retrospective? 你在回顧會議中玩什麼把戲?</title><link>https://kodofish.dev/post/2017-09-15_agile_neihu_sprint8/</link><pubDate>Fri, 15 Sep 2017 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2017-09-15_agile_neihu_sprint8/</guid><description>Agile_Neihu_Sprint8 — What’s your trick in retrospective? 你在回顧會議中玩什麼把戲? 上週參加了「Agile Neihu Sprint 8」的社群活動，主題談的是回顧會議中 Scrum Master 有什麼樣的手法可以引導團隊聚焦並找出團隊可以進行改善的目標。參加這場活動主要也是想多聽聽其他公司是怎麼做回顧會議的，也許有些可以改善的方法是可以在團隊中使用的。
在回顧會議中可以依循「開始 -&amp;gt; 回顧 -&amp;gt; 探索 -&amp;gt; 進化 -&amp;gt; 結束」五個階段進行。
開始 這是一開始階段，在這階段要幫助團隊的每個人將注意力拉回到會議中，以確保每個人可以全心投入在這個會議中。可以帶個破冰或 Check in 活動，藉以觀察每個人對於回顧會議的態度、感受，以便在後續的階段中適時採取適當的引導活動。
回顧 在這階段就正式開始引導團隊進行回顧。先請團隊成員回想這個 Sprint 發生了那些事件，以「產品」、「團隊」、「個人」這三個面向思考，並寫在便利貼上。都寫完後可以用時間軸的視覺化工具依每張便利貼的時間順序貼在時間軸上。就可以引導團隊開始回顧貼在時間軸上的事件進行回顧。
若從文字上無法輕易理解事件的來龍去脈，可以請團隊成員來說明。
探索 當團隊成員都對於 Sprint 所有的事件都回顧得差不多時，就可以開始引導團隊找出幾個可以幫助團隊改善的事件。
再重新做一次有更好的做法的事件 影響團隊進度的事件 困擾團隊的事件 明明看得出來是有問題的事件，但卻都沒有成員要提的事件。 進化 找出這些事件後，就可以引導團隊找出改善的做法，並且記錄下來，並在下個 Sprint 指定推動負責人進行落實改善，如此團隊成員才會覺得回顧會議是有用的，有用自然就會想繼續開回顧會議，以促進正向循環。
結束 在結束前可以再和團隊簡短的進行 Review，Review 這次會議團隊達成了那些共識與決定。
回顧會議的挑戰 在這次的活動中我覺得比較有趣的是和參與者一起討論回顧會議所曾經遇到的挑戰，像是：
團隊成員不想開會顧會議。 團隊主管覺得有任何問題都會隨時提出來，不需要開回顧會議。 團隊成員不願意發言。 團隊的決議沒有被落實。 討論的過程中也聽到了許多老司機的建言與方法，身為學習者對於上述的挑戰給不出任何實務上的建議，只能先將老司機的話記在心裡，也許有一天會派上場也說不一定。
活動頁面 Agile_Neihu_Sprint8 - What’s your trick in retrospective? 你在回顧會議中玩什麼把戲?</description></item></channel></rss>