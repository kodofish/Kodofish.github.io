<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>軟體開發 on Kodofish Blog</title><link>https://kodofish.dev/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/</link><description>Recent content in 軟體開發 on Kodofish Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Fri, 01 Mar 2019 00:00:00 +0800</lastBuildDate><atom:link href="https://kodofish.dev/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>讓你的 Visual Studio Code 同步設定</title><link>https://kodofish.dev/post/2019-03-01_vscode_extension_settings_sync/</link><pubDate>Fri, 01 Mar 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-03-01_vscode_extension_settings_sync/</guid><description>Visual Studio Code 是平常工作之外最常使用的編輯器了，不論是寫文件、查 Log、寫 Blog 都是用 Visual Studio Code。平時寫 Code 用的 Visual Studio 2017 本身就有設定檔同步的功能，不論我在公司或在家中使用時，都有一致的操作環環境與體驗。但 Visual Studio Code 卻沒有內建類似的功能，每當我新增了 Extension 或修改了設定，就必須再次在另一台電腦上手動再做一次，有點不方便。抱著這樣的困擾在 Google 上找了一下，就找到了今天想為此寫篇文的 Extension Settings Sync。
Settings Sync 能做什麼？ Settings Sync 有幾個主要的功能。
使用你的 Github 帳號及 Gist 來做為設定檔的儲存與下載使用。 透過快速鍵就可以上傳或下載設定檔 每次啟動 Visual Studio Code 會自動下載設定檔。 設定檔是儲存在 Gist 上，也因此你可以將你的設定檔分享給其他人 Settings Sync 會同步 Visual Studio Code 的幾個設定檔，包含：
Settings File Keybinding File Launch File Snippets Folder VSCode Extensions &amp;amp; Extensions Configurations Workspaces Folder 建立 Github access token Settings Sync 會需要使用你的 Github 及 Gist，所以如果你還沒有 Github 帳號的話，那趕快先去申請一個帳號，才能夠跟著繼續操作下去。</description></item><item><title>整理你的 Github 以及你為什麼該這麼做？</title><link>https://kodofish.dev/post/2019-01-21_organize_my_github/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-01-21_organize_my_github/</guid><description>&lt;p>各位有在使用 GitHub 的攻城獅/程序猿們，你們曾經整理過你們的 GitHub Repositories 嗎？你們的 Repositories 是否充斥著到處 Forks 回來的 Repository，而雜亂不堪？這邊介紹一下我自己在整理 GitHub 的小技巧。&lt;/p></description></item><item><title>Swagger Codegen — 自動產生文件的工具</title><link>https://kodofish.dev/post/2019-01-15_swaggercodegen/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2019-01-15_swaggercodegen/</guid><description>&lt;p>寫 Web API 的開發人員多少都用過 Swagger 這個工具，結合到 ASP.Net MVC 專案上，就會讀取程式碼裡的註解以產生 API 文件頁面。不論是加新 API 或修改 API，只要記得增加/調整註解，Swagger 就能夠產生出最新的 API 說明文件。也因此我再也沒有另外手動維護任何靜態文件了。&lt;/p>
&lt;p>但若是真的需要另外產生一份 API 文件時，難道只能手寫一份嗎？&lt;/p></description></item><item><title>再一次重新學習「重構與TDD」</title><link>https://kodofish.dev/post/2018-07-01_tdd_and_refactoring/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2018-07-01_tdd_and_refactoring/</guid><description>&lt;p>六月份安排兩天時間去參加了 91 主講的 『重構與 TDD 實戰營』，這門課早在三月時就已經報名了。但當時其實有點猶豫，猶豫什麼呢？早在前2年就上過TDD的課了，也不斷的在實踐，重構能力不敢說足以飛天，但跑在地上應該也是不成問題吧，但衝著 91 開的課，還是硬著頭皮報名下去了。&lt;/p></description></item><item><title>System Thinking 工作坊參加心得筆記</title><link>https://kodofish.dev/post/2018-04-12_system_thinking_workshop/</link><pubDate>Thu, 12 Apr 2018 00:00:00 +0800</pubDate><guid>https://kodofish.dev/post/2018-04-12_system_thinking_workshop/</guid><description>&lt;p>這是我第一次參加關於&lt;strong>System Thinking&lt;/strong>的工作坊，在短短約四個小時的時間，大概略知什麼是 System Thinking，但要熟練使用在日常工作或生活中，肯定還需要一段時間的學習與練習。&lt;/p>
&lt;hr></description></item></channel></rss>